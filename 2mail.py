import os
import time
import re
import redis
import logging
import email
from email import policy

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---

MAIL_CONFIG = {
    "worker-1": {
        "new": "/home/sora_worker1/Maildir/new",
        "cur": "/home/sora_worker1/Maildir/cur"
    },
    "worker-2": {
        "new": "/home/sora_worker2/Maildir/new",
        "cur": "/home/sora_worker2/Maildir/cur"
    },
}
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

REDIS_HOST = "localhost"
REDIS_PORT = 6379

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    handlers=[
        logging.FileHandler("logs/mail.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
log = logging.getLogger("local-mail-parser")

r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)

def find_code_in_text(text):
    """–ò—â–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ."""
    if not text:
        return None
    match = re.search(r'\b\d{6}\b', text)
    if match:
        return match.group(0)
    return None

def parse_email_file(filepath):
    """–ü–∞—Ä—Å–∏—Ç email —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python."""
    try:
        with open(filepath, 'rb') as f:
            msg = email.message_from_binary_file(f, policy=policy.default)
        
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    payload = part.get_payload(decode=True)
                    if payload:
                        charset = part.get_content_charset() or 'utf-8'
                        body = payload.decode(charset, errors='replace')
                        break
        else:
            payload = msg.get_payload(decode=True)
            if payload:
                charset = msg.get_content_charset() or 'utf-8'
                body = payload.decode(charset, errors='replace')
        
        return body
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return None

def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    log.info("=" * 60)
    log.info("–ó–∞–ø—É—â–µ–Ω –º—É–ª—å—Ç–∏-–≤–æ—Ä–∫–µ—Ä–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä")
    log.info("=" * 60)

    while True:
        try:

            for worker_id, paths in MAIL_CONFIG.items():
                mail_dir = paths["new"]
                processed_dir = paths["cur"]

                
                if not os.path.exists(mail_dir):
                    log.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {mail_dir} –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {worker_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")                
                    time.sleep(2)
                    continue
                    
                new_letters = [f for f in os.listdir(mail_dir) 
                            if os.path.isfile(os.path.join(mail_dir, f))]
                    
                if not new_letters:
                    log.info(f"–î–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {worker_id} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                    continue

                log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_letters)} –ø–∏—Å–µ–º –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ {worker_id}")
            
                for filename in new_letters:
                    filepath = os.path.join(mail_dir, filename)
                    log.info(f"üîî –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: {filename}")
                        
                    body = parse_email_file(filepath)
                    if body:
                        code = find_code_in_text(body)
                        
                        if code:
                            personal_channel = f"codes:for:{worker_id}"
                            log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥: {code} –¥–ª—è {worker_id}")
                            r.publish(personal_channel, code)
                            log.info(f"üì§ –ö–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Redis –∫–∞–Ω–∞–ª '{personal_channel}'")
                        else:
                            log.warning("‚ö†Ô∏è –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–ª–µ –ø–∏—Å—å–º–∞")
                    
                    try:
                        os.rename(filepath, os.path.join(processed_dir, filename))
                        log.info(f"‚úì –ü–∏—Å—å–º–æ {filename} –¥–ª—è {worker_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ.")
                    except Exception as e:
                            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è {worker_id}: {e}")

            time.sleep(5)

        except KeyboardInterrupt:
            log.info("\n‚õî –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            log.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            time.sleep(30)

if __name__ == "__main__":

    main_loop()

